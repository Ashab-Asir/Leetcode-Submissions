Prolem Name:Amount of Time for Binary Tree to Be Infected

link:https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/

Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void f(TreeNode* root , unordered_map<TreeNode*,TreeNode*>&mp){
        if(root==NULL) return;

        if(root->left) mp[root->left]=root;
        if(root->right)mp[root->right]=root;

        f(root->left,mp);
        f(root->right,mp);
    }

    TreeNode* findnode(int st ,TreeNode* root){
        if(root==NULL) return NULL;

        if(root->val==st) return root;
        
        TreeNode* fn = findnode(st,root->left);
        if(!fn) fn = findnode(st,root->right);
        return fn;
    }
    int amountOfTime(TreeNode* root, int start) {
        TreeNode* src = findnode(start,root);

        unordered_map<TreeNode*,TreeNode*> mp;
        f(root,mp);
        queue<TreeNode*> q;
        q.push(src);
        unordered_map<TreeNode*,bool> vis;
        vis[src]=true;
        int c=0;
        while(!q.empty()){

            int len = q.size();
            while(len--){
                TreeNode* node = q.front();
                q.pop();
                vis[node]=true;
                if(node->left && !vis[node->left]){
                    q.push(node->left);
                    vis[node->left]=true;
                }
                if(node->right && !vis[node->right]){
                    q.push(node->right);
                    vis[node->right]=true;
                }
                if(mp[node] && !vis[mp[node]]){
                    q.push(mp[node]);
                    vis[mp[node]]=true;
                }
            }
            c++;
        }
        return c-1;
    }
};